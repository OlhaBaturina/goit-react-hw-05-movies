{"version":3,"sources":["servises/useFetch.js","views/NotFound.js","Components/MovieDetailsPage/MovieDetailsPage.module.css","Components/MovieDetailsPage/MovieDetailsPage.js"],"names":["baseURL","API_KEY","fetchAPI","getFilmBySearch","searchQuery","axios","get","then","res","data","results","getCast","filmId","cast","getDaysTrends","getMoviesInfo","getReviews","NotFound","src","alt","width","module","exports","CastDetails","lazy","ReviewsDetails","MovieDetailsPage","url","useRouteMatch","location","useLocation","history","useHistory","useState","movie","setMovie","newDate","Date","release_date","status","setStatus","movieId","match","useEffect","r","console","log","catch","error","className","s","movieDetailsPage","type","onClick","push","state","from","buttonBack","thumb","poster_path","title","name","filmDetails","getFullYear","vote_average","overview","genres","map","link","to","pathname","search","fallback","exact","path"],"mappings":"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","file":"static/js/5.8be3191f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = '2b2a12748231526069949d7d6477582b';\r\n\r\nconst getDaysTrends = () => {\r\n    return axios\r\n        .get(`${baseURL}trending/all/week?api_key=${API_KEY}`)\r\n        .then(res => res.data.results);\r\n};\r\n\r\nconst getFilmBySearch = searchQuery => {\r\n    return axios\r\n        .get(\r\n            `${baseURL}search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1&include_adult=false`,\r\n        )\r\n        .then(res => res.data.results);\r\n};\r\n\r\nconst getMoviesInfo = filmId => {\r\n    return axios\r\n        .get(`${baseURL}movie/${filmId}?api_key=${API_KEY}`)\r\n        .then(res => res.data);\r\n};\r\n\r\nconst getCast = filmId => {\r\n    return axios\r\n        .get(`${baseURL}movie/${filmId}/credits?api_key=${API_KEY}`)\r\n        .then(res => res.data.cast);\r\n};\r\n\r\nconst getReviews = filmId => {\r\n    return axios\r\n        .get(`${baseURL}movie/${filmId}/reviews?api_key=${API_KEY}`)\r\n        .then(res => res.data.results);\r\n};\r\n\r\nexport const fetchAPI = {\r\n    getFilmBySearch,\r\n    getCast,\r\n    getDaysTrends,\r\n    getMoviesInfo,\r\n    getReviews,\r\n};\r\n","const NotFound = () => (\r\n    <div>\r\n        <h1>404 Page not found üîç</h1>\r\n        <img\r\n            src=\"https://mtdata.ru/u8/photo39C2/20569542232-0/original.jpg\"\r\n            alt=\"Page not found\"\r\n            width=\"360\"\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default NotFound;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieDetailsPage\":\"MovieDetailsPage_movieDetailsPage__29WKZ\",\"buttonBack\":\"MovieDetailsPage_buttonBack__3dIDI\",\"thumb\":\"MovieDetailsPage_thumb__2zugL\",\"filmDetails\":\"MovieDetailsPage_filmDetails__3dyHD\",\"link\":\"MovieDetailsPage_link__14ezd\"};","import s from './MovieDetailsPage.module.css';\nimport { Route } from 'react-router';\nimport { useState, useEffect, lazy, Suspense } from 'react';\nimport { fetchAPI } from '../../servises/useFetch';\nimport {\n    useRouteMatch,\n    NavLink,\n    useLocation,\n    useHistory,\n} from 'react-router-dom';\nimport { HiOutlineArrowNarrowLeft } from 'react-icons/hi';\nimport CustomLoader from '../Loader/Loader';\nimport NotFound from '../../views/NotFound';\nconst CastDetails = lazy(() => import('../Cast/Cast'));\nconst ReviewsDetails = lazy(() => import('../Reviews/Reviews'));\n\nexport default function MovieDetailsPage() {\n    const { url } = useRouteMatch();\n    const location = useLocation();\n    const history = useHistory();\n    const [movie, setMovie] = useState({});\n    const newDate = new Date(movie.release_date);\n    const [status, setStatus] = useState('pending');\n    const movieId = url.match(/[a-zA-Z0-9]+$/)[0];\n    // console.log(url.match(/[a-zA-Z0-9]+$/)[0]);\n\n    useEffect(() => {\n        setStatus('loading');\n        fetchAPI\n            .getMoviesInfo(movieId)\n            .then(r => {\n                console.log(r);\n                setMovie(r);\n                setStatus('pending');\n            })\n            .catch(error => error && setStatus('rejected'));\n    }, [movieId]);\n\n    const clickOnBack = () => {\n        history.push(location?.state?.from ?? `/`);\n    };\n\n    return (\n        <div className={s.movieDetailsPage}>\n            <button\n                type=\"button\"\n                onClick={clickOnBack}\n                className={s.buttonBack}\n            >\n                <HiOutlineArrowNarrowLeft /> Go back\n            </button>\n            {(status === 'pending' && (\n                <div>\n                    <div className={s.thumb}>\n                        <img\n                            src={\n                                movie.poster_path\n                                    ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n                                    : 'https://www.salonlfc.com/wp-content/uploads/2018/01/image-not-found-scaled.png'\n                            }\n                            alt={movie.title || movie.name}\n                            width=\"300\"\n                        />\n                        <div className={s.filmDetails}>\n                            <h1>\n                                {movie.title || movie.name} (\n                                {newDate.getFullYear()})\n                            </h1>\n                            <p>User Score: {movie.vote_average * 10} %</p>\n                            <h2>Overview</h2>\n                            <p>{movie.overview}</p>\n                            <h2>Genres</h2>\n                            <p>\n                                {movie.genres &&\n                                    movie.genres.map(({ name }) => (\n                                        <span> {name} </span>\n                                    ))}\n                            </p>\n                        </div>\n                    </div>\n                    <hr />\n                    <div>\n                        <h3>Additional information</h3>\n                        <ul>\n                            <li className={s.link}>\n                                <NavLink\n                                    to={{\n                                        pathname: `${url}/cast`,\n                                        state: {\n                                            from: location?.state?.from ?? '/',\n                                            search: location?.state?.search,\n                                        },\n                                    }}\n                                >\n                                    Cast\n                                </NavLink>\n                            </li>\n                            <li className={s.link}>\n                                <NavLink\n                                    to={{\n                                        pathname: `${url}/reviews`,\n                                        state: {\n                                            from: location?.state?.from ?? '/',\n                                            search: location?.state?.search,\n                                        },\n                                    }}\n                                >\n                                    Reviews\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </div>\n                    <hr />\n                    <Suspense fallback={<CustomLoader />}>\n                        <Route exact path=\"/movies/:movieId/cast\">\n                            <CastDetails movieId={movieId} />\n                        </Route>\n\n                        <Route exact path=\"/movies/:movieId/reviews\">\n                            <ReviewsDetails movieId={movieId} />\n                        </Route>\n                    </Suspense>\n                </div>\n            )) ||\n                (status === 'loading' && <CustomLoader />) ||\n                (status === 'rejected' && <NotFound />)}\n        </div>\n    );\n}\n"],"sourceRoot":""}